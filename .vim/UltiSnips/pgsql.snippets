

snippet depends "Dependencies/include/import section" b
---- dependencies:

-- -- for $1:
-- \i $2

---- :dependencies
endsnippet


snippet depend "Dependency import/include for top section" b
-- -- for $1:
-- \i $2

endsnippet

snippet disabletrig "Disable one or a class of triggers" b
ALTER TABLE ${1:tableName} DISABLE TRIGGER ${2:USER};
endsnippet


snippet doplpg "Imperative plpgsql block" b
DO LANGUAGE plpgsql $$
`!v PlpgBody()`
$$;
endsnippet

snippet notice "Raise a notice" b
RAISE NOTICE '${1:exceptionText}'${2:, };
endsnippet

snippet except "Raise an exception" b
RAISE EXCEPTION '${1:exceptionText}'${2:, ${3:argsToEmbed}} ${4:USING ${5:DETAIL=,} ${6:HINT=}};
endsnippet

snippet dropfun "Drop a function" b
DROP FUNCTION IF EXISTS ${1:`!v GetNearestFuncSig('forward')`} ${2:CASCADE}; -- X
endsnippet

snippet coun "Paste 'COUNT(*)'"
COUNT(*)
endsnippet

snippet commfun "Comment on a function" b
COMMENT ON FUNCTION `!v GetNearestFuncSig('backward')` IS $$
$0
$$;
endsnippet

snippet do "Define an imperative plpgsql block" b
DO LANGUAGE plpgsql $$
$0`!v PlpgBody()`
$$;
endsnippet

snippet createplpg "Definition for plpgsql function" b
CREATE OR REPLACE FUNCTION ${1:functionName}($2) RETURNS ${3:returnType} AS
$$
`!v PlpgBody()`
$$ LANGUAGE plpgsql $0;
endsnippet


snippet createsql "Defininition for sql function" b
CREATE OR REPLACE FUNCTION ${1:functionName}($2) RETURNS ${3:returnType} AS
$$
	$4
$$ LANGUAGE sql $0;
endsnippet


snippet createtab "Create a new table" b
CREATE TABLE IF NOT EXISTS ${1:tableName} (
	${2:columnName} ${3:columnType} $0
);
endsnippet


snippet commtab "Comment on a table" b
COMMENT ON TABLE ${1:tableName} IS $$
$0
$$;
endsnippet


snippet enabletrig "Enable one or a class of triggers" b
ALTER TABLE ${1:tableName} ENABLE TRIGGER ${2:USER};$0
endsnippet

snippet del "Delete data from a table" b
DELETE FROM ${1:tableName} WHERE ${2:conditon};
endsnippet

snippet insert "Insert data into a table" b
INSERT INTO ${1:tableName} (${2:columnList}) $0
endsnippet

snippet sel1 "Select with limit - grab a single row from a table"
SELECT * FROM ${1:tableName} LIMIT 1;$0
endsnippet

snippet sel "Select"
SELECT ${1:*} FROM ${2:source} ${3:WHERE ${4:true}};$0
endsnippet
# ^ Above, we nest $4 inside $3 because adding `WHERE true` to function-calls
# causes weird behavior. Allowing both to be easily cleared will make it easier
# to call funcs.

snippet seld "Select distinct"
SELECT DISTINCT ${1:*} FROM ${2:tableName} WHERE ${3:true};$0
endsnippet

snippet renamecol "Rename a table-column." b
ALTER TABLE ${1:tableName} RENAME COLUMN ${2:columnName} TO ${3:newColumnName};$0
endsnippet

snippet nnullcol "Set a column to reject null values" b
ALTER TABLE ${1:tableName} ALTER COLUMN ${2:columnName} SET NOT NULL;
endsnippet

snippet defaultcol "Set a column's default value" b
ALTER TABLE ${1:tableName} ALTER COLUMN ${2:columnName} SET DEFAULT ${3:defaultValue};
endsnippet

snippet in "Add IS NULL"
IS NULL
endsnippet

snippet in "Add IS NOT NULL"
IS NOT NULL
endsnippet

snippet ife "Add 'IF EXISTS'"
IF EXISTS
endsnippet

snippet ine "Add 'IF NOT EXISTS'"
IF NOT EXISTS
endsnippet

snippet if "Add an if-block." b
IF ${1:condition} THEN
	$0
END IF;
endsnippet

snippet else "Add an if-else block." b
IF ${1:condition} THEN
	$0
ELSE
END IF;
endsnippet

snippet elsif "Add an if-elseif block." b
	IF ${1:condition} THEN
		$2
	ELSIF ${3:condition}
	ELSE
	END;
endsnippet

snippet idf "Add 'IS DISTINCT FROM'"
IS DISTINCT FROM
endsnippet

snippet did "Add 'DEFERRABLE INITIALLY DEFERRED'" i
DEFERRABLE INITIALLY DEFERRED
endsnippet
# Allow inner expansions here because most of the time this will be as
# "'DEFERRABLE...'" (with surrounding quotes) which means it doesn't have a
# preceding whitespace

snippet droptrig "Drop a trigger." b
DROP TRIGGER IF EXISTS ${2:triggerName} ON ${1:tableName};$0
endsnippet

snippet dropview "Drop a view." b
DROP VIEW IF EXISTS ${1:viewName};$0
endsnippet

snippet renametab "Rename a table." b
ALTER TABLE ${1:tableName} RENAME TO ${2:newTableName};$0
endsnippet

snippet dropcol "Drop a column from an existing table" b
ALTER TABLE ${1:tableName} DROP COLUMN IF EXISTS ${2:columnName};$0
endsnippet

snippet commcol "Comment on one of a table's columns" b
COMMENT ON COLUMN ${1:tableName}.${2:columnName} IS
$$ $3
$$;$0
endsnippet

snippet upd "Update rows in a table the safe way" b
UPDATE ${1:tableName} SET ${2:columnName}=${3:expression} WHERE ${4:condition};$0
endsnippet
