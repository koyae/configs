

snippet dependencies "Dependencies/include/import section" b
---- dependencies:

-- -- for $1:
-- \i '$2'

---- :dependencies
endsnippet


snippet dependency "Dependency import/include for top section" b
-- -- for $1
-- \i $2

endsnippet

snippet disabletrigger "Disable one or a class of triggers" b
ALTER TABLE ${1:tableName} DISABLE TRIGGER ${2:USER};
endsnippet


snippet doplpg "Imperative plpgsql block" b
DO LANGUAGE plpgsql $$
`!v PlpgBody()`
$$;
endsnippet


snippet except "Raise an exception" b
RAISE EXCEPTION '${1:exceptionText}'${2: argsToEmbed};
endsnippet

snippet exceptfull "Raise an exception with the extra options included." b
RAISE EXCEPTION '${1:exceptionText}' ${2:argsToEmbed} ${3:USING} ${4:DETAIL=,} ${5:HINT=};
endsnippet

snippet dropfunc "Drop a function" b
DROP FUNCTION IF EXISTS ${1:functionName}($2) ${3:CASCADE}; -- X
endsnippet


snippet commentfunc "Comment on a function" b
COMMENT ON FUNCTION ${1:functionName} IS $$
$0
$$;
endsnippet


snippet createplpg "Definition for plpgsql function" b
CREATE OR REPLACE FUNCTION ${1:functionName}() RETURNS ${2:returnType} AS
$$
`!v PlpgBody()`
$$ LANGUAGE plpgsql $0;
endsnippet


snippet createsql "Defininition for sql function" b
CREATE OR REPLACE FUNCTION ${1:functionName}() RETURNS ${2:returnType} AS
$$
	$3
$$ LANGUAGE sql $0;
endsnippet


snippet enabletrigger "Enable one or a class of triggers" b
ALTER TABLE ${1:tableName} ENABLE TRIGGER ${2:USER};$0
endsnippet

snippet insert "Insert data into a table" b
INSERT INTO ${1:tableName} (${2:columnList}) $0
endsnippet

snippet sel1 "Select with limit - grab a single row from a table"
SELECT ${2:*} FROM ${1:tableName} LIMIT 1;$0
endsnippet

snippet sel "Select"
SELECT ${1:*} FROM ${2:tableName} WHERE ${3:true};$0
endsnippet

snippet seld "Select distinct"
SELECT DISTINCT ${1:*} FROM ${2:tableName} WHERE ${3:true};$0
endsnippet

snippet renamecol "Rename a table-column." b
ALTER TABLE ${1:tableName} RENAME COLUMN ${2:columnName} TO ${3:newColumnName};$0
endsnippet

snippet nnullcol "Set a column to reject null values" b
ALTER TABLE ${1:tableName} ALTER COLUMN ${2:columnName} SET NOT NULL;
endsnippet

snippet defaultcol "Set a column's default value" b
ALTER TABLE ${1:tableName} ALTER COLUMN ${2:columnName} SET DEFAULT ${3:defaultValue};
endsnippet

snippet ife "Add 'IF EXISTS'"
IF EXISTS
endsnippet

snippet ine "Add 'IF NOT EXISTS'"
IF NOT EXISTS
endsnippet

snippet if "Add an if-block." b
IF ${1:condition} THEN
	$0
END IF;
endsnippet

snippet else "Add an if-else block." b
IF ${1:condition} THEN
	$0
ELSE
END IF;
endsnippet

snippet elsif "Add an if-elseif block." b
	IF ${1:condition} THEN
		$2
	ELSIF ${3:condition}
	ELSE
	END;
endsnippet

snippet idf "Add 'IS DISTINCT FROM'"
IS DISTINCT FROM
endsnippet

snippet droptrig "Drop a trigger." b
DROP TRIGGER IF EXISTS ${2:triggerName} ON ${1:tableName};$0
endsnippet

snippet dropview "Drop a view." b
DROP VIEW IF EXISTS ${1:viewName};$0
endsnippet

snippet renametab "Rename a table." b
ALTER TABLE ${1:tableName} RENAME TO ${2:newTableName};$0
endsnippet

snippet dropcol "Drop a column from an existing table" b
ALTER TABLE ${1:tableName} DROP COLUMN IF EXISTS ${2:columnName};$0
endsnippet

snippet commentcol "Comment on one of a table's columns" b
COMMENT ON COLUMN ${1:tableName}.${2:columnName} IS
$$ $3
$$;$0
endsnippet

snippet update "Update rows in a table the safe way" b
UPDATE ${1:tableName} SET ${2:columnName}=${3:expression} WHERE ${4:condition};$0
endsnippet
