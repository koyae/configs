#!/bin/bash
# define_funcs

# remember to source this BEFORE you try to export the stuff

# Complex `s3cmd` wrapper:
function s3cmd {
	# define keys if needed:
	if [ -z "$AWS_SECRET_KEY" ]; then
		both=`gpg -o- ~/.aws/keys.gpg 2>/dev/null`
		export AWS_ACCESS_KEY=`echo "$both" | awk "NR==1"`
		export AWS_SECRET_KEY=`echo "$both" | awk "NR==2"`
	fi
	options=$"--access_key=$AWS_ACCESS_KEY --secret_key=$AWS_SECRET_KEY --config=~/.s3cfg"
	if (( $# == 2 )) && [ "$1" = "du" ]; then
		options="$options du $2"
		echo "$options" > options.tmp
		output=`command s3cmd $options 2>/dev/null`
		echo "$output" | cut -d ' ' -f 1 | sed -e 's/^/scale=2; /' -e 's/$/\/1024^2/' | bc | sed 's/$/ MB/'
	else
		options="$options ""$@"
		command s3cmd $options
	fi
}

function koyae_find_home {
	if [ -d "$HOME" ] || [ -L "$HOME" ]; then
		printf '%s' "$HOME"
	elif [ -d "~" ] || [ -L "~" ]; then
		printf '%' "~"
	fi
}

function compare_text {
	if [[ $# -ne 2 ]]; then
		1>&2 echo "Function needs exactly 2 arguments."
		exit 1
	fi
	# escape any spaces in second path:
	two="$(printf '%s' "$2" | awk '{gsub(/ /,"\\ "); print}')"
	vim "$1" -c "vs $two" -c "windo diffthis"
}

# set_aws_credentials [<aws_credentials_file_path>[.gpg]]
# If path is omitted, function looks for ~/.aws_credentials_path for default
# Otherwise it asks interactively
function set_aws_credentials {
	location="$1"
	home="$(koyae_find_home)"
	default_storage_path="$home/.aws_credentials_path"
	if [ "$location" = "" ] && [ "$home" != "" ]; then
		location="$(cat "$default_storage_path")"
	fi
	if [ "$location" = "" ]; then
		echo "Please enter location of credentials file."
		read
		location="$REPLY"
	else
		1>&2 printf 'Using location "%s"\n' "$location"
		1>&2 printf '(Provide an argument to use a different path.)\n'
	fi
	if [ -e "$location" ]; then
		printf '%s' "$location" > "$default_storage_path"
	else
		1>&2 printf 'Bad locaton "%s"\n' "$locaton"
		exit 1
	fi
	credentials="$(gpg2 -o- "$location" 2>/dev/null)"
	succ=$?
	if [ $succ -eq 0 ]; then
		1>&2 echo "Success."
	else
		1>&2 echo "Failed. Bad password?"
	fi
	export AWS_ACCESS_KEY_ID=$(printf "%s" "$credentials" | head -n 1)
	export AWS_SECRET_ACCESS_KEY=$(printf "%s" "$credentials" | awk 'NR==2')
	return $succ
}

function set_pg_credentials {
	echo "Please enter your PostgreSQL password."
	read -s
	export PGPASSWORD="$REPLY"
	1>&2 echo "Password set."
}

function set_graph_credentials {
	location="$1"
	if [ "$location" = "" ]; then
		location="$(koyae_find_home)"
		location="$location/.ms_graph_credentials.gpg"
	fi
	credentials="$(gpg2 -d -o- "$location")"
	if [ $? -ne 0 ]; then
		1>&2 echo "Failure!!"
		return 1
	fi
	export MS_GRAPH_BEARER_TOKEN="$credentials"
	1>&2 echo "Success."
}

# shortcut for making script-files
function mkscript {
	touch "$1"
	chmod a+x "$1"
	vim "$1"
}

# Move current working directory up one or more levels:
function up {
	rungnum=1 # how many ladder-rungs to climb, default just 1 level if no args
	path="`pwd`"
	while getopts ":S123456789" opt; do
		if [[ "$opt" == "S" ]]; then
			path="`pwd -P`"
			shift # allow rungnum to be picked up as $1 below
		elif [[ "$opt" == '?' ]]; then
			echo 'up usage: up [-S] [levels]'
			echo 'levels specifies how many times to go up a directory.'
			echo -n '-S does an absolute ascent (resolves symbolic links in path)'
			kill -INT $$
		fi
	done
	if (( $# > 0 )); then
		rungnum=$1
	fi
	declare -a ladder
	while [ "$path" != "/" ]; do
		ladder+=("$path")
		path=`dirname "$path"`
	done
	dest="${ladder[$rungnum]}"
	if [[ ${#ladder[@]} -gt $rungnum ]]; then
	# if a valid rung per the array-size was specified:
		cd "$dest"
	else
	# if caller wanted a level higher than the highest level, just put them at
	# system root:
		cd "/"
	fi
}

# recursive grep / grep recursive
function grepr {
# NOTE: to allow this function to work in readonly directories,
# ..... the "~" ($HOME) directory is used to write a temporary file.
# ..... On Windows systems, the default $HOME path is generally not set
# ..... correctly, resulting in errors when `grepr` is called.
# ..... This can be resolved either by using CMD's mklink
# ..... to create a symbolic link in [cygwinDirectory]/home to the proper place
# ..... (on Windows 7 and up), or you can directly set $HOME in /etc/bashrc,
# ..... ~/export_local, or elsewhere that individual ".bashrc"s are likely to
# ..... source.
	location=$"." #"`pwd -P`"
	regex=$""
	findargs="-type f"
	dostring=""
	if (( $# < 1 )); then
		echo 'Recursive grep usage: grepr <regex> or grepr <location> <regex> [<args for find>]'
		echo 'With the simple invocation, find will receive -type f. With the full invocation, this must be specified if desired.'
		kill -INT $$
	elif [[ $# -eq 1 ]]; then
	# if we just got the one argument
		regex="$1"
		dostring="grep -R -n -H '$regex' . --color=always "
	else # (( $# > 1 )); then
	# if we got more than one argument
		location=$"$1"
		regex=$"$2"
		findargs=$""
		shift 2
		while [[ $# -gt 0 ]]; do
			if [[ "$1" == -type ]]; then
			# if we're dealing with the -type flag, assume it's followed by a letter:
				findargs=$"$findargs $1"
				shift
				findargs=$"$findargs $1" # find will choke if passed e.g. -type 'f' vs. -type f
			elif [[ "$1" == -* || "$1" == \! ]]; then
			# if component begins with '-' or is negator '!'
			# don't quote so it actually reads as a flag:
				findargs=$"$findargs $1"
			else
			# otherwise quote so that we don't get glob-expansion happening early:
				findargs=$"$findargs '$1'"
			fi
			shift
		done
		dostring=$"find $location $findargs -exec grep -n -H '$regex' {} --color=always \\;"
	fi
	# find $location $findargs -exec grep -H '$regex' {} --color=always \\\;
	fn=$"/tmp/`whoami`_grepr_`date +%s`.tmp"
	echo "$dostring" > "$fn"
	chmod u+x "$fn" # enable execution for current user
	. "$fn" # execute file in current shell
	rm -f "$fn"
}

# [ Complex alias for builtin `ps` command ]
function ps {
	if (( $# == 2 )) && [[ "$1" == "aux" ]]; then
		psResults=$"`command ps aux`"
		echo "$psResults" | awk 'NR==1'
		echo "$psResults" | grep "$2"
	else
		command ps "$@"
	fi
}

# [ Complex alias for vim invocation ]
function vim {
	if (( $# == 1 )) && [[ "$1" = *:* ]]; then
	# if given a grep-style path followed by a colon giving a
	# line-number, automatically separate the two and jump to that line:
		command vim "${1%:*}" -c "${1#*:}"
		return $?
	fi
	command vim "$@"
	return $?
}

# [ Complex alias for git to add options depending on the specifc subcommand ]
function git {
	if (( $# > 0 )); then
		if [[ "$1" == "commit" ]]; then
		# if a commit was just made, show the author-information afterwards so
		# that misattributed commits can be caught before being pushed to repo:
			command git "$@"
			command git show | awk 'NR==2'
		elif [[ "$1" == "clone" ]]; then
			command git "$@" --recursive
		elif [[ "$1" == "cd" ]]; then
			cd "$(git rev-parse --show-toplevel)"
		else
			command git "$@"
		fi
	else
		command git
	fi
}

# Write to the beginning of a file
function prepend {
	if (( $# < 2 )); then
		echo "Two or more arguments required. Usage: prepend <prefix> file1[ file2...]"
		echo ""
		echo "Note that since this command is a wrapper for sed, characters such as"
		echo "backslashes require double-escaping, once for the shell and once"
		echo "again for sed; for one backslash to be included in the prepended"
		echo "output string, the substring \\\\\\\\ (four backslashes) must"
		echo "appear in the input to the command."
	else
		prefix=$"$1"
		shift # move past the prefix so all remaining params are files
		while (( $# > 0 )); do
			sed -i "1i $prefix" "$1"
			shift
		done
	fi
}

# Delete the contents of a file
function nuke {
	if (( $# < 1 )); then
		echo 'One or more arguments required. Useage: nuke file1[ file2...]'
		echo 'Overwrites file(s) with an empty regular file.'
		kill -INT $$
	fi
	for a in "$@"; do
		rm "$a"
		touch "$a"
	done
}

function hashdeebhide {
	sed -i 's/^\([ \t]\+\)\([^ #].* # PRODREM\)/\1# \2/' "$1"
}

# Uncompress tar'd files:
function untar {
	if (( $# < 1 )); then
		echo 'No arguments received. Usage: untar <archiveFile>'
	else
		tar -zxvf "$1"
		if (( $? != 0 )); then
			echo Unpack failed under gzip. Trying again with bzip2.
			tar -jxvf "$1"
		fi
	fi
}

# Remove vim lockfiles
function unlock {
	if (( $# < 1 )); then
		echo 'No arguments received. Usage: unlock <file>'
	else
		for arg in "$@"; do
		# ^ loop through arguments as needed
			if [[ "$arg" = .* ]]; then
			# if argument starts with a dot, vim doesn't add another:
				rm "$arg".swp
			else
				rm ."$arg".swp
			fi
		done
	fi
}

# Change current working directory to the absolute directory of a symlink
function cdl {
    cd "$(dirname "$(readlink "$1")")"
}

# Alias for cdl function (defined above)
function lcd {
	cdl "$@"
}

# Convert a Windows-style file-path to a linux-style one
function wcd {
	cd $(echo "$1" | sed 's/\\\\/\//g')
}

# Change current working directory to a parallel directory
sis() {
	cd "$(\cis "$@")"
}

# usage: sis [<index>] <replacement> [<path>]
# index        --  the index of the path-component to replace, where 1
#                  represents the first component of the path.
#                  Negative numbers can be used to count from the deepest part
#                  of the path. -1 is the name of the current directory
#                  Defaults to: -1
#
# replacement  --  the value of the path-component (directory) found at <index>
#                  which should replace whatever is currently there
#
# path         --  the path to work on
#                  Defaults to: current directory
cis() {
	part=-1 # index of component to change
	path="`pwd`"
	if [[ $# -gt 2 ]]; then
		path="$3"
	fi
	OLDIFS="$IFS"
	sub="$1" # string to use for replacing target index
	IFS='/'
	IFS=/ read -ra patharr <<< "$path"
	if [ $# -gt 1 ]; then
		if printf '%s' "$1" | grep -q '^[-+]\?[0-9]'; then
			part="$1"
			sub="$2"
		fi
	fi
	if [ $part -eq 0 ]; then
		1>&2 echo "0 is not a valid index. 1 is the first, -1 is the last."
		return 1
	fi
	slot=$part
	if [ $part -lt 0 ]; then
		slot=$((${#patharr[@]}+$part))
	fi
	patharr[$slot]="$sub"
	printf '%s' "${patharr[*]}"
	IFS="$OLDIFS"
}

# [ Complex alias for builtin `du` command ]
function duc {
	# below, we ignore aliases on `du` with `command`
	if (( $# < 1 )); then
		command du -h -s *
	else
		command du -h "$@"
	fi
}

# Output a table of contents for a zip-file:
function toc {
	if (( $# < 1 )); then
		echo 'toc function - exports a table of contents for a zip-file'
		echo "\tUsage: toc <file>.zip"
	fi
	vim -c "w $1.toc" -c "q" "$1"
	echo "Saved toc to $1.toc"
}

function xviml {
# view the contents of an xml-file after formatting has been applied
	if (( $# < 1 )); then
		echo 'Format XML and open in vim. Saving afterwards optional. Usage: xviml <file>'
		kill -INT $$
	fi
	xmllint "$1" --format | vim -
}

function sviml {
# view the contents of an SQL-file after keywords have all been capped
	if (( $# < 1 )); then
		echo 'Format PostgreSQL and open in vim. Saving afterwards optional. Usage: sviml <file>'
		kill -INT $$
	fi
	# vim "$1" -c 'call ChangeSqlCase()'
	vim "$1" -c 'normal ggVG:call ChangeSqlCase()'
	# ^ gg goes to top
	# ^.. V starts selecting by line
	# ^.. G goes to bottom
	# ^.. Then we call a custom function to fix the case and hit enter
}

function jsonf {
	if (( $# < 1 )); then
		echo "Format JSON-file in-place."
		kill -INT $$
	fi
	t="$(mktemp)"
	python -m json.tool "$1" "$t"
	mv -f "$t" "$1"
}

function jvimn {
# view the contents of a JSON-file after formatting has been applied
	if (( $# < 1 )); then
		echo 'Format JSON and open in vim. Saving afterwards optional. Useage: jvimn <file>'
		kill -INT $$
	fi
	formatted="$(python -m json.tool "$1")"
	rcode=$?
	if [[ $rcode -eq 127 ]]; then
		1>&2 echo 'jvimn: Problem finding `python` command.'
	elif [[ $rcode -eq 0 ]]; then
		printf "%s" "$formatted" | vim -c "setlocal syntax=json" -c "file $1" -
	else
		1>&2 echo "jvimn: Something went wrong when trying to format the JSON."
		1>&2 echo "jvimn: Please check the file at: $1"

	fi
}

function headlessql {
# start psql in a loop that listens forever to a FIFO file
	if [ $# -lt 1 ]; then
		1>&2 echo "headlessql warning: no connection-information given."
	fi
	if [ "$PGPASSWORD" = "" ]; then
		printf 'PGPASSWORD is unset. Set it now?'
		read -n 1
		if [ "$REPLY" = "y" ]; then
			printf '\nPlease input PGPASSWORD.\n'
			read -s
			export PGPASSWORD="$REPLY"
			echo ""
		fi
	fi
	fifoPath="/tmp/fif"
	if [ $# -gt 1 ]; then
		fifoPath="$2"
	fi
	mkfifo "$fifoPath"
	while [ 1 = 1 ]; do
		# try to disable the pager, since we generally only want to look at the
		# window rather than touch it
		export PAGER=""
		psql "$1" -q --no-psqlrc -v VERBOSITY=default -v QUIET=off --expanded \
			-v ON_ERROR_STOP=on -v ON_ERROR_ROLLBACK=on -f "$fifoPath"
	done
	# socket-approach is simpler to express because it doesn't require a loop
	# but at least for psql, a bad SQL-command will break it, so that doesn't
	# fly. Anyways for posterity, here's what it looks like:
	# socketPath="/tmp/sock"
	# socat UNIX-LISTEN:"$socketPath",fork STDOUT | psql "$1" 2>&1
}

function fnd {
# If given a single search-term, do a sliding search in the current directory
	# assume contains-search first:
	term='*'"$1"'*' # potentially nonfinal
	if (( $# == 0 )) || (( $# > 2 )); then
		echo 'shortfind usage: fnd [-e] <term>'
		echo '-e -- exact match'
		kill -INT $$
	elif (( $# == 2 )); then
		if ! [[ "$@" = *-e* ]]; then
			echo -e "\nTo use two arguments with shortfind, one must be -e"
			echo 'For more information just use fnd by itself to show help'
			kill -INT $$
		elif [[ "-e" = $1 ]]; then
			term="$2"
		elif [[ "-e" = $2 ]]; then
			term="$1"
		fi
	fi
	command find . -iname "$term"
}


function c_d {
	if (( $# > 0 )) && [ "$1" != "-" ] && ! [ -d "$1" ]; then
		local parentDir=$(dirname "$1")
		echo "$1 is not a directory." 1>&2
		if [[ -d "$parentDir" ]] && [[ "$parentDir" != "." ]]; then
		# ^ dirname yields "." if passed the empty string. Since "." should
		# pretty invariably test as a valid directory, we check for this
		# separately. We can encounter this if the caller does a relative `cd`
		# like `cd 0` in a directory where there is no subdir called '0'
			echo  "Changing to parent dir instead." 1>&2
			command cd "$parentDir"
		fi
		return 1;
	else
		command cd "$@"
		return $?;
		# ^ `command` is transparent to operations encountering errors, so we
		# just go by what it tells us
	fi
}


# Shortcut for doing both `chown` and `chgrp`
function choth {
	usr="`whoami`"
	if (( $# > 1 )); then
		usr="$1"
		shift
	fi
	for arg in "$@"; do
		chown "$usr" "$arg"
		chgrp "$usr" "$arg"
	done
}

